<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on @kov4l3nko</title>
    <link>https://kov4l3nko.github.io/blog/</link>
    <description>Recent content in Blogs on @kov4l3nko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kov4l3nko.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cracking SSL pinning in AFNetwork</title>
      <link>https://kov4l3nko.github.io/blog/2018-06-18-afnetwork-disable-ssl-pinning/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-06-18-afnetwork-disable-ssl-pinning/</guid>
      <description>I continue to play with SSL pinning on iOS. This time is was AFNetworking framework.
Today a random guy from Twitter asked me to disable SSL on the Loops app for Android and iOS. From time to time I do quick researches for free, so why not?
It is well known that the &amp;ldquo;key function&amp;rdquo; of SSL pinning protection in AFNetworking is the method
-[AFSecurityPolicy evaluateServerTrust:forDomain:]  declared as
- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust forDomain:(nullable NSString *)domain;  It returns 1 if domain is safe, and 0 otherwise.</description>
    </item>
    
    <item>
      <title>Disabling SSL pinning by hooking SecTrustEvaluate(...) on iOS 11</title>
      <link>https://kov4l3nko.github.io/blog/2018-05-27-sll-pinning-hook-sectrustevaluate/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-05-27-sll-pinning-hook-sectrustevaluate/</guid>
      <description>Motivation My motivation to start this research was simple. I wanted to see HTTPs traffic of Viber 8.9.0.7 on iOS 11.0.1 with Electra 1.0.4. I tried SSLKillSwitch2, but it didn&amp;rsquo;t disable SSL pinning. I have no idea why. Anyway, I did a research and wrote a simple script to disable SSL pinning in Viber by hooking just a single iOS Security framework function SecTrustEvaluate(...).
How SecTrustEvaluate(...) works The function declaration is</description>
    </item>
    
    <item>
      <title>My experience with LLDB on Electra Jailbreak 1.0.4 (second edition)</title>
      <link>https://kov4l3nko.github.io/blog/2018-05-25-my-experience-with-lldb-and-electra-jb/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-05-25-my-experience-with-lldb-and-electra-jb/</guid>
      <description>The first edition of this article was written on March 18, 2018. This is the second edition, with some important updates.
I tried to google a short and clear instruction how to debug apps from AppStore on iOS devices jailbroken with Electra. I did not found anything useful, so I wrote this guide. It works for me, but I&amp;rsquo;m not sure it works for your. I tested it on</description>
    </item>
    
    <item>
      <title>Debugging Android third-party Java apps with native methods</title>
      <link>https://kov4l3nko.github.io/blog/2018-01-25-debugging-mixed-android-code/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-01-25-debugging-mixed-android-code/</guid>
      <description>This guide is the last part of the series about third-party Android code debugging:
 Debugging third-party machine code in Android Debugging third-party Android Java code on OS X Debugging third-party Android app code from the very beginning Debugging Android third-party Java apps with native methods (the guide you are reading now)  Prerequisites Check your Android device:
 The device is rooted. You have access to Android console as root (with adb shell su or via SSH with SSHDroid).</description>
    </item>
    
    <item>
      <title>Debugging third-party Android app code from the very beginning</title>
      <link>https://kov4l3nko.github.io/blog/2018-01-23-debugging-android-apps-from-first-instruction/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-01-23-debugging-android-apps-from-first-instruction/</guid>
      <description>This guide is a part of the series about third-party Android code debugging:
 Debugging third-party machine code in Android Debugging third-party Android Java code on OS X Debugging third-party Android app code from the very beginning (the guide you are reading now) Debugging Android third-party Java apps with native methods  In the previous guide about debugging third-party Android Java code, we
 run the app we want to debug, and then attach our debugger to the already running app.</description>
    </item>
    
    <item>
      <title>A quick word on Xposed &#43; JustTrustMe SSL certificate UN-pinning</title>
      <link>https://kov4l3nko.github.io/blog/2018-01-21-justtrustme-android-ssl-pinning/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-01-21-justtrustme-android-ssl-pinning/</guid>
      <description>Suppose you have a third-party Android app and want to disable SSL pinning in the app. Just
 check if automatic tools, designed to disable SSL pinning, do the job; if they don&amp;rsquo;t, reverse the app code and disable SSL pinning yourself, or hire a reverse engineer to do the job for you.  Yes, it&amp;rsquo;s that simple ;) I&amp;rsquo;d recommend you to start with XPosed framework and JustTrustMe. Here is a quick and not very detailed instruction for your Android device:</description>
    </item>
    
    <item>
      <title>Debugging third-party Android Java code on OS X</title>
      <link>https://kov4l3nko.github.io/blog/2018-01-20-debugging-thirdparty-android-java-code/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-01-20-debugging-thirdparty-android-java-code/</guid>
      <description>This guide is a part of the series about third-party Android code debugging:
 Debugging third-party machine code in Android Debugging third-party Android Java code on OS X (the guide you are reading now) Debugging third-party Android app code from the very beginning Debugging Android third-party Java apps with native methods  There is a very detailed article from @CR0SP about debugging third-party Android Java code on Windows. It&amp;rsquo;s great and I&amp;rsquo;d recommend you to read it first, especially if you use Windows.</description>
    </item>
    
    <item>
      <title>Debugging third-party machine code in Android</title>
      <link>https://kov4l3nko.github.io/blog/2018-01-16-debugging-machine-code-android/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2018-01-16-debugging-machine-code-android/</guid>
      <description>This guide is a part of the series about third-party Android code debugging:
 Debugging third-party machine code in Android (the guide you are reading now) Debugging third-party Android Java code on OS X Debugging third-party Android app code from the very beginning Debugging Android third-party Java apps with native methods  It&amp;rsquo;s a very simple guide, it can be &amp;ldquo;compressed&amp;rdquo; to a single sentence:
 Copy gdbserver from Android NDK to a rooted Android device via SSH, attach it to a running process and enjoy remote debugging with GDB.</description>
    </item>
    
    <item>
      <title>A brief  C/C&#43;&#43; how-to-start guide for jailbroken iOS devices</title>
      <link>https://kov4l3nko.github.io/blog/2017-12-15-jb-ios-coding-basics/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2017-12-15-jb-ios-coding-basics/</guid>
      <description>Intro Here we discuss some C/C++ programming basics for jailbroken iOS devices (on non-jailbroken devices, command line tools are not useful because iOS console is unavailable, DYLIBs are replicated with private frameworks). First, we write a command line tool, then a DYLIB.
The sandbox Let&amp;rsquo;s prepare a sandbox to play in.
Environment We need the latest MacOS Sierra and XCode. Also, we need a jailbroken iOS device.
This guide was tested with</description>
    </item>
    
    <item>
      <title>My presentation on OWASP Kyiv Meetup Winter 2017</title>
      <link>https://kov4l3nko.github.io/blog/2017-12-02-owasp-kyiv-winter-2017/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2017-12-02-owasp-kyiv-winter-2017/</guid>
      <description>In general, I don&amp;rsquo;t like conferences, especially big ones. Noise and many people make me nervous. However, from time to time I speak on small local meetups. Today I spoke on OWASP Kyiv Meetup about SSL pinning.
 My presentaion in English (download slides in PDF) YouTube (watch my speech in Russian)  Also, watch all speeches on YouTube.</description>
    </item>
    
    <item>
      <title>Bypassing TicketMaster 1.23.0 jailbreak detection</title>
      <link>https://kov4l3nko.github.io/blog/2017-11-11-tm-jalibreak-check/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2017-11-11-tm-jalibreak-check/</guid>
      <description>In the blog post, we bypass TicketMaster jailbreak detection. It works for TicketMaster 1.23.0 (the laters version in AppStore for Nov 11, 2017). Maybe it will work for future versions as well, but it&amp;rsquo;s not for sure.
If we start Ticket Master 1.23.0 on a jailbroken iOS device, we see
Let&amp;rsquo;s bypass it.
Research Ok, lets do a quick research. Install the app from AppStore and decrypt the app binaries.</description>
    </item>
    
    <item>
      <title>Error-based image format from Apple</title>
      <link>https://kov4l3nko.github.io/blog/2016-07-05-error-based-image-format-from-apple/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2016-07-05-error-based-image-format-from-apple/</guid>
      <description>The research is kind of a geek joke for reverse engineers, please don&amp;rsquo;t take it seriously.
A quick word on Netpbm image formats UPDATE from Dec 10, 2017: The PBM image is not visible in the latest desktop/mobile Safari anymore. Maybe they canceled PBM support (it would be a smart move, BTW).
Netpbm formats are quite old image formats developed in the 1980s. However, the latest Safari browsers (Safari 9.</description>
    </item>
    
    <item>
      <title>Disassembling iOS system frameworks and libs with Hopper</title>
      <link>https://kov4l3nko.github.io/blog/2016-05-13-disassembling-ios-system-frameworks-and-libs/</link>
      <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2016-05-13-disassembling-ios-system-frameworks-and-libs/</guid>
      <description>This extremely short guide is for iOS 7-9, both ARM32 and 64 bit Apple processors. The things you need to start:
 Mac with the latest version of Hopper installed a jailbroken iOS device with OpenSSH installed  Let&amp;rsquo;s start. Most of iOS system libs are sticked together in a DYLD shared cache (a big file mapped to a process address space). SSH your iOS device and
# find / | grep dyld_shared_cache  For example, in iPhone 4 with iOS 7, you can find the DYLD shared cache here</description>
    </item>
    
    <item>
      <title>Debugging iOS binaries with LLDB</title>
      <link>https://kov4l3nko.github.io/blog/2016-04-27-debugging-ios-binaries-with-lldb/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2016-04-27-debugging-ios-binaries-with-lldb/</guid>
      <description>This is an extended version of the guide I posted in 2014. It covers iOS 7-9 for ARM32 and 64 bit processors. Please note that LLDB is quite buggy, so some things may not work for you, or work in a wrong way. Shit happens, sorry.
Preparing the sandbox Environment You need:
 Mac with the latest XCode installed a jailbroken iPhone/iPad/iPod with OpenSSH installed MachOView installed on the Mac  Excracting debugserver Extract debugserver from XCode.</description>
    </item>
    
    <item>
      <title>Bypassing an anti-debug protection in Musical.ly 4.7.2 for iOS</title>
      <link>https://kov4l3nko.github.io/blog/2016-03-07-bypassing-anti-debug-musically-for-ios/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2016-03-07-bypassing-anti-debug-musically-for-ios/</guid>
      <description>Today we disable anti-debug protection in Musical.ly 4.7.2 for iOS.
Segmentation fault: 11 I installed the musical.ly app from AppStore on my jailbroken iPhone 4 to take a quick look on the app under debugger. I tried to attach debugserver to a running process and got
iPhone:~ root# debugserver *:6666 -a Musical.ly debugserver-310.2 for armv7. Attaching to process Musical.ly... Segmentation fault: 11  So the app used some anti-debugging techniques.</description>
    </item>
    
    <item>
      <title>Decrypting apps from AppStore</title>
      <link>https://kov4l3nko.github.io/blog/2016-03-01-decrypting-apps-from-appstore/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2016-03-01-decrypting-apps-from-appstore/</guid>
      <description>Another &amp;ldquo;ultimate&amp;rdquo; guide (he-he :)) to decrypting iOS applications from AppStore. It&amp;rsquo;s based on my 2 years experience. I hope somebody finds it useful. Questions are welcome in comments.
The sandbox  Mac with the latest OS X installed MachOView 2.4 (9200) installed on the Mac a jailbroken iOS device with OpenSSH LLDB installed on the iPhone  Preparations Install the app you want to disassemble, e.g. Samsung Content Viewer, to a jailbroken iOS device and start it.</description>
    </item>
    
    <item>
      <title>Breakpoint callbacks in LLDB Python scripts</title>
      <link>https://kov4l3nko.github.io/blog/2015-08-14-breakpoint-callbacks-in-python-lldb-scripting/</link>
      <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2015-08-14-breakpoint-callbacks-in-python-lldb-scripting/</guid>
      <description>Today we talk about breakpoint callbacks in LLDB Python scripts. Setting breakpoints is easy. For example, write the Python script:
# This is test.py import lldb def test(debugger, command, result, internal_dict): &amp;quot;&amp;quot;&amp;quot; Just a test command to set a breakpoint &amp;quot;&amp;quot;&amp;quot; target = debugger.GetSelectedTarget() breakpoint = target.BreakpointCreateByName(&amp;quot;SSLWrite&amp;quot;) def __lldb_init_module(debugger, internal_dict): debugger.HandleCommand(&#39;command script add -f test.test test&#39;)  The scripts implements a command test. The command sets a breakpoint on SSLWrite.</description>
    </item>
    
    <item>
      <title>Two simple tricks to hide your Android application</title>
      <link>https://kov4l3nko.github.io/blog/2015-04-19-two-simple-tricks-to-hide-your-android-application/</link>
      <pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2015-04-19-two-simple-tricks-to-hide-your-android-application/</guid>
      <description>Reversing Android malware, I see the same technical tricks in almost every malicious code. In this article, I describe two simple tricks used by numerous Android malware makers to hide their malware applications.
Create an application Lets download the latest version of Android SDK with Android Studio, install it and add some SDK packages (if Android Studio is already installed on your PC, just skip this step). Then start Android Studio and use its startup wizard to create an app:</description>
    </item>
    
    <item>
      <title>About EncryptedPasswd</title>
      <link>https://kov4l3nko.github.io/blog/2014-06-09-about-encryptedpasswd/</link>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2014-06-09-about-encryptedpasswd/</guid>
      <description>Just a quick word about EncryptedPasswd parameter.Sniffing traffic between an Android device and Google Play, one can see that login to Google Play is just a POST request like this:
POST /auth HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 404 Host: android.clients.google.com Connection: Keep-Alive User-Agent: GoogleLoginService/1.3 (a10 JZO54K) accountType=HOSTED_OR_GOOGLE&amp;amp;Email=testemail%40gmail.com&amp;amp;has_permission=1&amp;amp;add_account=1&amp;amp;EncryptedPasswd=AFcb4KS9WAU3NI_-jdMDSueqT-oO1-WN2B9pxB-te_Elx3MElC9B2TgAaWqkY7kiQSnGFEwaY1KVkizxadGsRnFnHa7vlRCrB4Me1XnHBuOz9oi48eBcm0rC7r8QaC_GPp1YPI8OFa0fZU_dTJypganc2tREsgE-_TJQSKWkA7zSWnsq8g%3D%3D&amp;amp;service=ac2dm&amp;amp;source=android&amp;amp;androidId=378b05ab23e0e8e9&amp;amp;device_country=ua&amp;amp;operatorCountry=ua&amp;amp;lang=en&amp;amp;sdk_version=16  The request headers and parameters are more or less clear, except EncryptedPasswd parameter. Google search gives nothing useful, Chinese RCE forums contain no information about the parameter, even Adam Goodman did not explain the parameter in his great research on bypassing Google&amp;rsquo;s two-factor authentication.</description>
    </item>
    
    <item>
      <title>CVE-2014-1354: how to find a critical bug in iOS</title>
      <link>https://kov4l3nko.github.io/blog/2014-03-28-how-to-find-a-critical-bug-in-ios/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2014-03-28-how-to-find-a-critical-bug-in-ios/</guid>
      <description>In this article we will find a critical bug in iOS Core Graphics. It will be a true old-style manual research; we will not use any automatic vulnerability scanners, code analysers, symbolic execution tools etc.
Finding a bug We will use the following &amp;ldquo;sandbox&amp;rdquo;:
 iPhone 4 iOS 7.0.4 with evasi0n jailbreak LLDB + debugserver  We will test Mobile Safari. We are going to do the following:
 Choose an ancient multimedia file formal which is not used anymore but still supported by Mobile Safari.</description>
    </item>
    
    <item>
      <title>Installing LLDB</title>
      <link>https://kov4l3nko.github.io/blog/2014-02-14-installing-lldb/</link>
      <pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2014-02-14-installing-lldb/</guid>
      <description>Warning! At the moment, the guide is obsolete. It makes sense to read the updated and extended version of this guide.
Today we will talk about installation of LLDB (on Mac OS) and debugserver (on iOS 7.0-7.0.4).
Installation You need LLDB installed on your Mac and the debugserver installed on your iOS device. To install LLDB on your Mac, just install the latest version of XCode. To install the debugserver on iOS device, mount DeveloperDiskImage.</description>
    </item>
    
    <item>
      <title>How to build android-apktool 2.00 (beta) from sources</title>
      <link>https://kov4l3nko.github.io/blog/2014-01-12-how-to-build-android-apktool-2-00-beta-from-sources/</link>
      <pubDate>Sun, 12 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2014-01-12-how-to-build-android-apktool-2-00-beta-from-sources/</guid>
      <description>Android-apktool 2.00 promises a lot of cool things: Smali/Backsmali 2.0, Smali debugging (last time we saw this great feature in android-apktool 1.4.1, it broke in 1.4.2 and later releases, and now it&amp;rsquo;s back!), numerous bugfixes etc. The only problem is the version 2.00 is not released at the moment.It&amp;rsquo;s still in beta, no compiled JARs are available on the download page:
So this post is for reverse engineers who want to build android-apktool of version 2.</description>
    </item>
    
    <item>
      <title>User-defined GDB commands on iOS</title>
      <link>https://kov4l3nko.github.io/blog/2014-01-09-user-defined-gdb-commands-on-ios/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2014-01-09-user-defined-gdb-commands-on-ios/</guid>
      <description>In this post we will discuss user-defined GDB commands on iOS. We will talk about some really simple things and play with &amp;ldquo;toy&amp;rdquo; examples. Hovewer, it is assumed that the reader is not a 100% noob. He (or she) should be familiar GDB on iOS and should has basic knowledge of Objective C runtime (all that classes, class instances, properties&amp;hellip; well, you know :)).
All examples were tested for GDB 6.</description>
    </item>
    
    <item>
      <title>How to prepare iPhone 4 with iOS 6.1.x for reverse engineering tasks</title>
      <link>https://kov4l3nko.github.io/blog/2013-12-01-how-to-prepare-iphone-4-with-ios-6-1-x-for-reverse-engineering-tasks/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2013-12-01-how-to-prepare-iphone-4-with-ios-6-1-x-for-reverse-engineering-tasks/</guid>
      <description>Here is an extremely detailed step-by-step instruction for a jailbroken iPhone 4 with iOS 6.1.x and Cydia installed. It will be useful for beginners, not for advanced reverse engineers.
Step 1. OpenSSH First of all, install OpenSSH. On the iPhone, run Cydia and tap &amp;ldquo;OpenSSH Access How-To&amp;rdquo;:
Tap the &amp;ldquo;OpenSSH&amp;rdquo; link:
Tap &amp;ldquo;Install&amp;rdquo;
and &amp;ldquo;Confirm&amp;rdquo;:
Wait until installation is completed and tap &amp;ldquo;Return to Cydia&amp;rdquo;:
Now OpenSSH is installed. On the iPhone, open &amp;ldquo;Settings&amp;rdquo; → &amp;ldquo;Wi-Fi&amp;rdquo; and connect the iPhone to a Wi-Fi network (if it is not connected yet).</description>
    </item>
    
    <item>
      <title>Twitter is watching you, anonymous</title>
      <link>https://kov4l3nko.github.io/blog/2013-11-29-twitter-is-watching-you-anonymous/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2013-11-29-twitter-is-watching-you-anonymous/</guid>
      <description>Reversing the official Twitter client 5.13.1 for iOS, I found that it sends some very strange requests to a server. I used a custom GDB script to dump [NSURLConnection] right before it invokes [start]. It allowed me to see a HTTPS traffic between the Twitter client and server.
In addition to a usual traffic (registration, authorization, tweeting etc), I often saw POST requests to https://api.twitter.com/1.1/jot/client_event. The requests looked like
The Twitter client sent such requests after almost any action.</description>
    </item>
    
    <item>
      <title>Breakpoints in Smali code</title>
      <link>https://kov4l3nko.github.io/blog/2012-08-30-breakpoints-in-smali-code/</link>
      <pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2012-08-30-breakpoints-in-smali-code/</guid>
      <description>In my previous posts I wrote a step-by-step instruction how to debug Smali code with Apktool and NetBeans. However, there were no details about breakpoints, just a short note in steps 12 and 13
 12.&amp;nbsp;Set a breakpoint. You must select line with some instruction, you can&amp;rsquo;t set breakpoint on lines starting with ., : or #.
13.&amp;nbsp;Trigger some action in application. If you run at the breakpoint, then the thread should stop and you will be able to debug it step by step, watch variables, etc.</description>
    </item>
    
    <item>
      <title>Debugging Smali code with apk-tool and NetBeans</title>
      <link>https://kov4l3nko.github.io/blog/2012-08-27-debugging-smali-code-with-apk-tool-and-netbeans/</link>
      <pubDate>Mon, 27 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://kov4l3nko.github.io/blog/2012-08-27-debugging-smali-code-with-apk-tool-and-netbeans/</guid>
      <description>Ho-ho-ho, it works now! Here is a (more or less detailed) instruction to debug a Smali code of a third-part Android application. To debug Smali code with apk-tool, you need
 Apk-tool 1.4.1 and NetBeans 6.8. Use these versions, not the latest ones! Currently, the latest versions of apk-tool and NetBeans do not allow to debug Smali code.
 Java, JDK and other stuff installed in your system to make Apk-tool and NetBeans working</description>
    </item>
    
  </channel>
</rss>